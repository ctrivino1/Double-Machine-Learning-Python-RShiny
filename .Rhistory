fileInput("csv_file", "Choose CSV File", accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
)),
tags$hr(),
textOutput("upload_status")  # Display upload status
)
)
)
}
})
# Show the modal when the button is clicked
observeEvent(input$upload_csv_btn, {
show_modal(TRUE)  # Show the modal
showModal(modalDialog(
title = "Upload CSV File",
size = "m",
easyClose = FALSE,
footer = tagList(
modalButton("Cancel"),
actionButton("upload", "Upload", class = "btn-primary")
),
fluidRow(
column(12,
# Single `fileInput` with id "csv_file"
fileInput("csv_file", "Choose CSV File", accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
)),
tags$hr(),
textOutput("upload_status")  # Display upload status
)
)
))
})
# Close the modal and display table when a file is uploaded
observeEvent(input$csv_file, {
if (!is.null(input$csv_file)) {
show_modal(FALSE)  # Hide the modal
output$upload_status <- renderText("File uploaded successfully!")  # Update upload status
# Read the CSV file and display it in the table
df <- read.csv(input$csv_file$datapath)  # Read the uploaded CSV
output$csv_table <- renderDT({
datatable(df, options = list(scrollX = TRUE))  # Display the dataframe as a scrollable table
})
}
})
# Allow the modal to be canceled manually
observeEvent(input$cancel, {
show_modal(FALSE)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(DT)  # Load the DT package for data tables
ui <- fluidPage(
tags$head(
# Custom CSS to set the background color and improve table visibility
tags$style(HTML("
body {
background-color: #f8f9fa;  /* Light background for the body */
}
.modal-dialog {
background-color: #fff;  /* White background for modal */
}
.dataTable {
background-color: #fff;  /* White background for the data table */
}
"))
),
# Button to trigger modal for CSV upload
actionButton("upload_csv_btn", "Upload CSV", icon = icon("file-upload"),
style = "position: absolute; top: 5px; right: 5px; z-index: 10000;"),
# Placeholder for modal UI
uiOutput("modalUI"),
# Table to display the uploaded CSV
DTOutput("csv_table")  # Output for displaying the CSV contents in a DT table
)
server <- function(input, output, session) {
# Track if modal should be shown
show_modal <- reactiveVal(FALSE)  # Start with modal closed
# Render the modal UI conditionally
output$modalUI <- renderUI({
if (show_modal()) {  # Render only if show_modal is TRUE
modalDialog(
title = "Upload CSV File",
size = "m",
easyClose = FALSE,
footer = tagList(
modalButton("Cancel"),
actionButton("upload", "Upload", class = "btn-primary")  # Upload button
),
fluidRow(
column(12,
fileInput("csv_file", "Choose CSV File", accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
)),
tags$hr(),
textOutput("upload_status")  # Display upload status
)
)
)
}
})
# Show the modal when the button is clicked
observeEvent(input$upload_csv_btn, {
show_modal(TRUE)  # Show the modal
})
# Close the modal and display table when a file is uploaded
observeEvent(input$upload, {
if (!is.null(input$csv_file)) {
show_modal(FALSE)  # Hide the modal
output$upload_status <- renderText("File uploaded successfully!")  # Update upload status
# Read the CSV file and display it in the table
df <- read.csv(input$csv_file$datapath)  # Read the uploaded CSV
output$csv_table <- renderDT({
datatable(df, options = list(scrollX = TRUE))  # Display the dataframe as a scrollable table
})
} else {
output$upload_status <- renderText("No file selected!")  # Update status if no file is selected
}
})
# Allow the modal to be canceled manually
observeEvent(input$cancel, {
show_modal(FALSE)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(DT)  # Load the DT package for data tables
ui <- fluidPage(
tags$head(
# Custom CSS to set the background color and improve table visibility
tags$style(HTML("
body {
background-color: #f8f9fa;  /* Light background for the body */
}
.modal-dialog {
background-color: #fff;  /* White background for modal */
}
.dataTable {
background-color: #fff;  /* White background for the data table */
}
"))
),
# Button to trigger modal for CSV upload
actionButton("upload_csv_btn", "Upload CSV", icon = icon("file-upload"),
style = "position: absolute; top: 5px; right: 5px; z-index: 10000;"),
# Placeholder for modal UI
uiOutput("modalUI"),
# Table to display the uploaded CSV
DTOutput("csv_table"),  # Output for displaying the CSV contents in a DT table
# Display upload status
textOutput("upload_status")
)
server <- function(input, output, session) {
# Track if modal should be shown
show_modal <- reactiveVal(FALSE)  # Start with modal closed
# Render the modal UI conditionally
output$modalUI <- renderUI({
if (show_modal()) {  # Render only if show_modal is TRUE
modalDialog(
title = "Upload CSV File",
size = "m",
easyClose = FALSE,
footer = tagList(
modalButton("Cancel"),
actionButton("upload", "Upload", class = "btn-primary")  # Upload button
),
fluidRow(
column(12,
fileInput("csv_file", "Choose CSV File", accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
))
)
)
)
}
})
# Show the modal when the button is clicked
observeEvent(input$upload_csv_btn, {
show_modal(TRUE)  # Show the modal
})
# Close the modal and display table when a file is uploaded
observeEvent(input$upload, {
if (!is.null(input$csv_file)) {
show_modal(FALSE)  # Hide the modal
output$upload_status <- renderText("File uploaded successfully!")  # Update upload status
# Read the CSV file and display it in the table
df <- read.csv(input$csv_file$datapath)  # Read the uploaded CSV
output$csv_table <- renderDT({
datatable(df, options = list(scrollX = TRUE))  # Display the dataframe as a scrollable table
})
} else {
output$upload_status <- renderText("No file selected!")  # Update status if no file is selected
}
})
# Allow the modal to be canceled manually
observeEvent(input$cancel, {
show_modal(FALSE)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(DT)  # Load the DT package for data tables
ui <- fluidPage(
# Button to trigger modal for CSV upload
actionButton("upload_csv_btn", "Upload CSV", icon = icon("file-upload"),
style = "position: absolute; top: 5px; right: 5px; z-index: 10000;"),
# Placeholder for modal UI
uiOutput("modalUI"),
# Table to display the uploaded CSV
DTOutput("csv_table"),  # Output for displaying the CSV contents in a DT table
# Display upload status
textOutput("upload_status")
)
server <- function(input, output, session) {
# Track if modal should be shown
show_modal <- reactiveVal(FALSE)  # Start with modal closed
# Render the modal UI conditionally
output$modalUI <- renderUI({
if (show_modal()) {  # Render only if show_modal is TRUE
modalDialog(
title = "Upload CSV File",
size = "m",
easyClose = FALSE,
footer = tagList(
modalButton("Cancel"),
actionButton("upload", "Upload", class = "btn-primary")  # Upload button
),
fluidRow(
column(12,
fileInput("csv_file", "Choose CSV File", accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
))
)
)
)
}
})
# Show the modal when the button is clicked
observeEvent(input$upload_csv_btn, {
show_modal(TRUE)  # Show the modal
})
# Close the modal and display table when a file is uploaded
observeEvent(input$upload, {
if (!is.null(input$csv_file)) {
show_modal(FALSE)  # Hide the modal
output$upload_status <- renderText("File uploaded successfully!")  # Update upload status
# Read the CSV file and display it in the table
df <- read.csv(input$csv_file$datapath)  # Read the uploaded CSV
output$csv_table <- renderDT({
datatable(df, options = list(scrollX = TRUE))  # Display the dataframe as a scrollable table
})
} else {
output$upload_status <- renderText("No file selected!")  # Update status if no file is selected
}
})
# Allow the modal to be canceled manually
observeEvent(input$cancel, {
show_modal(FALSE)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(DT)  # Load the DT package for data tables
ui <- fluidPage(
tags$head(
# Custom CSS to set the background color and improve table visibility
tags$style(HTML("
body {
background-color: #f8f9fa;  /* Light background for the body */
}
.modal-dialog {
background-color: #fff;  /* White background for modal */
}
.dataTable {
background-color: #fff;  /* White background for the data table */
}
"))
),
# Button to trigger modal for CSV upload
actionButton("upload_csv_btn", "Upload CSV", icon = icon("file-upload"),
style = "position: absolute; top: 5px; right: 5px; z-index: 10000;"),
# Placeholder for modal UI
uiOutput("modalUI"),
# Table to display the uploaded CSV
DTOutput("csv_table"),  # Output for displaying the CSV contents in a DT table
# Display upload status
textOutput("upload_status")
)
server <- function(input, output, session) {
# Track if modal should be shown, start with modal open
show_modal <- reactiveVal(TRUE)  # Set to TRUE to show modal on start
# Render the modal UI conditionally
output$modalUI <- renderUI({
if (show_modal()) {  # Render only if show_modal is TRUE
modalDialog(
title = "Upload CSV File",
size = "m",
easyClose = FALSE,
footer = tagList(
modalButton("Cancel"),
actionButton("upload", "Upload", class = "btn-primary")  # Upload button
),
fluidRow(
column(12,
fileInput("csv_file", "Choose CSV File", accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
))
)
)
)
}
})
# Show the modal when the button is clicked (this could be optional now)
observeEvent(input$upload_csv_btn, {
show_modal(TRUE)  # Show the modal again if needed
})
# Close the modal and display table when a file is uploaded
observeEvent(input$upload, {
if (!is.null(input$csv_file)) {
df <- read.csv(input$csv_file$datapath)  # Read the uploaded CSV
# Close modal and show the table
show_modal(FALSE)  # Hide the modal
output$upload_status <- renderText("File uploaded successfully!")  # Update upload status
output$csv_table <- renderDT({
datatable(df, options = list(scrollX = TRUE))  # Display the dataframe as a scrollable table
})
} else {
output$upload_status <- renderText("No file selected!")  # Update status if no file is selected
}
})
# Allow the modal to be canceled manually
observeEvent(input$cancel, {
show_modal(FALSE)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(DT)  # Load the DT package for data tables
ui <- fluidPage(
tags$head(
# Custom CSS to set the background color and improve table visibility
tags$style(HTML("
body {
background-color: #f8f9fa;  /* Light background for the body */
}
.modal-dialog {
background-color: #fff;  /* White background for modal */
}
.dataTable {
background-color: #fff;  /* White background for the data table */
}
"))
),
# Button to trigger modal for CSV upload
actionButton("upload_csv_btn", "Upload CSV", icon = icon("file-upload"),
style = "position: absolute; top: 5px; right: 5px; z-index: 10000;"),
# Placeholder for modal UI
uiOutput("modalUI"),
# Table to display the uploaded CSV
DTOutput("csv_table"),  # Output for displaying the CSV contents in a DT table
# Display upload status
textOutput("upload_status")
)
server <- function(input, output, session) {
# Track if modal should be shown, start with modal open
show_modal <- reactiveVal(TRUE)  # Set to TRUE to show modal on start
# Render the modal UI conditionally
output$modalUI <- renderUI({
if (show_modal()) {  # Render only if show_modal is TRUE
modalDialog(
title = "Upload CSV File",
size = "m",
easyClose = FALSE,
footer = tagList(
modalButton("Cancel"),
actionButton("upload", "Upload", class = "btn-primary")  # Upload button
),
fluidRow(
column(12,
fileInput("csv_file", "Choose CSV File", accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
))
)
)
)
}
})
# Show the modal when the button is clicked
observeEvent(input$upload_csv_btn, {
show_modal(TRUE)  # Show the modal every time the button is clicked
})
# Close the modal and display table when a file is uploaded
observeEvent(input$upload, {
if (!is.null(input$csv_file)) {
df <- read.csv(input$csv_file$datapath)  # Read the uploaded CSV
# Hide the modal and show the table
show_modal(FALSE)  # Hide the modal
output$upload_status <- renderText("File uploaded successfully!")  # Update upload status
output$csv_table <- renderDT({
datatable(df, options = list(scrollX = TRUE))  # Display the dataframe as a scrollable table
})
} else {
output$upload_status <- renderText("No file selected!")  # Update status if no file is selected
}
})
# Allow the modal to be canceled manually
observeEvent(input$cancel, {
show_modal(FALSE)  # Close the modal when the cancel button is clicked
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(DT)  # Load the DT package for displaying tables
ui <- fluidPage(
tags$head(
# Custom CSS to improve the app's appearance
tags$style(HTML("
body {
background-color: #f8f9fa;  /* Light background for the body */
}
.modal-dialog {
background-color: #fff;  /* White background for modal */
}
.dataTable {
background-color: #fff;  /* White background for the data table */
}
"))
),
# Button to trigger modal for CSV upload
actionButton("upload_csv_btn", "Upload CSV", icon = icon("file-upload"),
style = "position: absolute; top: 5px; right: 5px; z-index: 10000;"),
# Placeholder for modal UI
uiOutput("modalUI"),
# Table to display the uploaded CSV
DTOutput("csv_table"),  # Output for displaying the CSV contents in a DT table
# Display upload status
textOutput("upload_status")
)
server <- function(input, output, session) {
# Track if modal should be shown, initially set to TRUE
show_modal <- reactiveVal(TRUE)  # Start with the modal open
# Function to create the modal UI
modalUI <- function() {
modalDialog(
title = "Upload CSV File",
size = "m",
easyClose = FALSE,
footer = tagList(
modalButton("Cancel"),
actionButton("upload", "Upload", class = "btn-primary")  # Upload button
),
fluidRow(
column(12,
fileInput("csv_file", "Choose CSV File", accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
))
)
)
)
}
# Render the modal UI conditionally
output$modalUI <- renderUI({
if (show_modal()) {  # Render only if show_modal is TRUE
showModal(modalUI())  # Show the modal
}
})
# Show the modal when the button is clicked
observeEvent(input$upload_csv_btn, {
show_modal(TRUE)  # Always show the modal when the button is clicked
})
# Close the modal and display table when a file is uploaded
observeEvent(input$upload, {
if (!is.null(input$csv_file)) {
df <- read.csv(input$csv_file$datapath)  # Read the uploaded CSV
# Hide the modal and show the table
show_modal(FALSE)  # Hide the modal
output$upload_status <- renderText("File uploaded successfully!")  # Update upload status
output$csv_table <- renderDT({
datatable(df, options = list(scrollX = TRUE))  # Display the CSV in a datatable
})
}
})
# Allow modal to be cancelled manually
observeEvent(input$cancel, {
show_modal(FALSE)  # Close modal when cancel is pressed
})
}
# Run the application
shinyApp(ui = ui, server = server)
