global_dat <- Titanic
t <- Titanic
library(shiny)
ui <- fluidPage(
actionButton("clearButton", "Clear Workspace"),
actionButton("refreshButton", "Refresh App"),
textOutput("message")
)
server <- function(input, output, session) {
observe({
# Get the names of all objects in the global environment
global_objects <- ls(envir = .GlobalEnv)
# Display the names of the global objects
output$message <- renderText(paste("Global Environment Objects:", paste(global_objects, collapse = ', ')))
})
observeEvent(input$clearButton, {
# Get the names of all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Exclude the variable 'global_dat'
objects_to_remove <- setdiff(all_objects, c('global_dat'))
# Remove all objects, except 'global_dat', from the global environment
rm(list = objects_to_remove, envir = .GlobalEnv)
})
observeEvent(input$refreshButton, {
# Restart the Shiny app session
session$reload()
})
}
shinyApp(ui, server)
# global_dat <- Titanic
# t <- Titanic
global_dat <- Titanic
t <- Titanic
library(shiny)
ui <- fluidPage(
actionButton("clearButton", "Clear Workspace"),
actionButton("refreshButton", "Refresh App"),
textOutput("message")
)
server <- function(input, output, session) {
# Initialize the click counter
click_count <- reactiveVal(0)
observe({
# Get the names of all objects in the global environment
global_objects <- ls(envir = .GlobalEnv)
# Display the names of the global objects
output$message <- renderText(paste("Global Environment Objects:", paste(global_objects, collapse = ', ')))
})
observeEvent(input$clearButton, {
# Increment the click counter
click_count(click_count() + 1)
# Check if it's the second click or greater
if (click_count() >= 2) {
# Get the names of all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Exclude the variable 'global_dat'
objects_to_remove <- setdiff(all_objects, c('global_dat'))
# Remove all objects, except 'global_dat', from the global environment
rm(list = objects_to_remove, envir = .GlobalEnv)
output$message <- renderText("Workspace cleared, except 'global_dat'!")
}
})
observeEvent(input$refreshButton, {
# Restart the Shiny app session
session$reload()
})
}
shinyApp(ui, server)
# global_dat <- Titanic
# t <- Titanic
library(shiny)
ui <- fluidPage(
actionButton("clearButton", "Clear Workspace"),
actionButton("refreshButton", "Refresh App"),
textOutput("message")
)
server <- function(input, output, session) {
# Initialize the click counter
click_count <- reactiveVal(0)
observe({
# Get the names of all objects in the global environment
global_objects <- ls(envir = .GlobalEnv)
# Display the names of the global objects
output$message <- renderText(paste("Global Environment Objects:", paste(global_objects, collapse = ', ')))
})
observeEvent(input$clearButton, {
# Increment the click counter
click_count(click_count() + 1)
# Check if it's the second click or greater
if (click_count() >= 2) {
# Get the names of all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Exclude the variable 'global_dat'
objects_to_remove <- setdiff(all_objects, c('global_dat'))
# Remove all objects, except 'global_dat', from the global environment
rm(list = objects_to_remove, envir = .GlobalEnv)
output$message <- renderText("Workspace cleared, except 'global_dat'!")
}
})
observeEvent(input$refreshButton, {
# Restart the Shiny app session
session$reload()
})
}
shinyApp(ui, server)
# global_dat <- Titanic
# t <- Titanic
global_dat <- Titanic
t <- Titanic
library(shiny)
ui <- fluidPage(
actionButton("clearButton", "Clear Workspace"),
actionButton("refreshButton", "Refresh App", style = "display: none;"),
textOutput("message")
)
server <- function(input, output, session) {
# Initialize the click counter
click_count <- reactiveVal(0)
observeEvent(input$clearButton, {
# Increment the click counter
click_count(click_count() + 1)
# Check if it's 2 clicks or more
if (click_count() >= 2) {
# Get the names of all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Exclude the variable 'global_dat'
objects_to_remove <- setdiff(all_objects, c('global_dat'))
# Remove all objects, except 'global_dat', from the global environment
rm(list = objects_to_remove, envir = .GlobalEnv)
output$message <- renderText("Workspace cleared, except 'global_dat'!")
# Show the 'Refresh App' button
shinyjs::enable("refreshButton")
}
})
observeEvent(input$refreshButton, {
# Restart the Shiny app session
session$reload()
})
}
shinyApp(ui, server)
# global_dat <- Titanic
# t <- Titanic
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("clearButton", "Clear Workspace"),
actionButton("refreshButton", "Refresh App", style = "display: none;"),
textOutput("message")
)
server <- function(input, output, session) {
# Initialize the click counter
click_count <- reactiveVal(0)
observe({
# Get the names of all objects in the global environment
global_objects <- ls(envir = .GlobalEnv)
# Display the names of the global objects
output$message <- renderText(paste("Global Environment Objects:", paste(global_objects, collapse = ', ')))
})
observeEvent(input$clearButton, {
# Increment the click counter
click_count(click_count() + 1)
# Check if it's 2 clicks or more
if (click_count() >= 2) {
# Get the names of all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Exclude the variable 'global_dat'
objects_to_remove <- setdiff(all_objects, c('global_dat'))
# Remove all objects, except 'global_dat', from the global environment
rm(list = objects_to_remove, envir = .GlobalEnv)
# Show the 'Refresh App' button
shinyjs::enable("refreshButton")
}
})
observeEvent(input$refreshButton, {
# Restart the Shiny app session
session$reload()
})
}
shinyApp(ui, server)
global_dat <- Titanic
t <- Titanic
library(shiny)
ui <- fluidPage(
actionButton("clearButton", "Clear Workspace"),
actionButton("refreshButton", "Refresh App"),
textOutput("message")
)
server <- function(input, output, session) {
# Initialize the click counter
click_count <- reactiveVal(0)
observe({
# Get the names of all objects in the global environment
global_objects <- ls(envir = .GlobalEnv)
# Display the names of the global objects
output$message <- renderText(paste("Global Environment Objects:", paste(global_objects, collapse = ', ')))
})
observeEvent(input$clearButton, {
# Increment the click counter
click_count(click_count() + 1)
# Check if it's the second click or greater
if (click_count() >= 2) {
# Get the names of all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Exclude the variable 'global_dat'
objects_to_remove <- setdiff(all_objects, c('global_dat'))
# Remove all objects, except 'global_dat', from the global environment
rm(list = objects_to_remove, envir = .GlobalEnv)
output$message <- renderText("Workspace cleared, except 'global_dat'!")
}
})
observeEvent(input$refreshButton, {
# Restart the Shiny app session
session$reload()
})
}
shinyApp(ui, server)
# global_dat <- Titanic
# t <- Titanic
global_dat <- Titanic
t <- Titanic
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("clearButton", "Clear Workspace"),
conditionalPanel('false', actionButton("refreshButton", "Refresh App")),
textOutput("message")
)
server <- function(input, output, session) {
# Initialize the click counter
click_count <- reactiveVal(0)
observe({
# Get the names of all objects in the global environment
global_objects <- ls(envir = .GlobalEnv)
# Display the names of the global objects
output$message <- renderText(paste("Global Environment Objects:", paste(global_objects, collapse = ', ')))
})
observeEvent(input$clearButton, {
# Increment the click counter
click_count(click_count() + 1)
# Check if it's the second click or greater
if (click_count() >= 2) {
# Get the names of all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Exclude the variable 'global_dat'
objects_to_remove <- setdiff(all_objects, c('global_dat'))
# Remove all objects, except 'global_dat', from the global environment
rm(list = objects_to_remove, envir = .GlobalEnv)
output$message <- renderText("Workspace cleared, except 'global_dat'!")
# Trigger a click event on the 'Refresh App' button
shinyjs::runjs('$("#refreshButton").click();')
}
})
observeEvent(input$refreshButton, {
# Restart the Shiny app session
session$reload()
})
}
shinyApp(ui, server)
# global_dat <- Titanic
# t <- Titanic
?click_count
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("clearButton", "Clear Workspace"),
conditionalPanel('false', actionButton("refreshButton", "Refresh App")),
textOutput("message")
)
server <- function(input, output, session) {
# Initialize the click counter
click_count <- reactiveVal(0)
observe({
# Get the names of all objects in the global environment
global_objects <- ls(envir = .GlobalEnv)
# Display the names of the global objects
output$message <- renderText(paste("Global Environment Objects:", paste(global_objects, collapse = ', ')))
})
observeEvent(input$clearButton, {
# Increment the click counter
click_count(click_count() + 1)
# Check if it's the second click or greater
if (click_count() >= 2) {
# Get the names of all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Exclude the variable 'global_dat'
objects_to_remove <- setdiff(all_objects, c('global_dat'))
# Remove all objects, except 'global_dat', from the global environment
rm(list = objects_to_remove, envir = .GlobalEnv)
output$message <- renderText("Workspace cleared, except 'global_dat'!")
# Trigger a click event on the 'Refresh App' button
shinyjs::runjs('$("#refreshButton").click();')
}
})
observeEvent(input$refreshButton, {
# Restart the Shiny app session
session$reload()
})
}
shinyApp(ui, server)
# global_dat <- Titanic
# t <- Titanic
library(shiny)
library(shinyjs)
data <- matrix(1:20, nrow=5)
ui <-  fluidPage(title = 'Count Button Clicks',
useShinyjs(),
fluidRow(style = "padding-bottom: 20px;",
column(width=6,
textOutput("actionclickCount"),
br(),
textOutput("downloadclickCount")
),
column(width=6,
actionButton("actionBtn", "Action Button"),
br(),
downloadButton("dwnldBtn", "Download Button")
)
)
)
server <- function(input, output, session) {
output$actionclickCount <- renderText({
paste('Action Button Clicks =',input$actionBtn)
})
output$downloadclickCount <- renderText({
paste('Download Button Clicks =', input$rnd)
})
output$dwnldBtn <- downloadHandler(
filename = 'data.csv',
content = function(file){
write.csv(data, file)
},
contentType = 'csv'
)
observe({
if(is.null(input$rnd)){
runjs("
var click = 0;
Shiny.onInputChange('rnd', click)
var dwnldBtn = document.getElementById('dwnldBtn')
dwnldBtn.onclick = function() {click += 1; Shiny.onInputChange('rnd', click)};
")
}
})
}
runApp(shinyApp(ui = ui, server = server), launch.browser = TRUE)
global_dat <- Titanic
t <- Titanic
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("clearButton", "Clear Workspace"),
conditionalPanel('false', actionButton("refreshButton", "Refresh App")),
textOutput("message")
)
server <- function(input, output, session) {
# Initialize the click counter in JavaScript
shinyjs::runjs('var clickCount = 0;')
observe({
# Get the names of all objects in the global environment
global_objects <- ls(envir = .GlobalEnv)
# Display the names of the global objects
output$message <- renderText(paste("Global Environment Objects:", paste(global_objects, collapse = ', ')))
})
observeEvent(input$clearButton, {
# Increment the click counter in JavaScript
shinyjs::runjs('clickCount++;')
# Check if it's the second click or greater
if (shinyjs::runjs('clickCount >= 2')) {
# Get the names of all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Exclude the variable 'global_dat'
objects_to_remove <- setdiff(all_objects, c('global_dat'))
# Remove all objects, except 'global_dat', from the global environment
rm(list = objects_to_remove, envir = .GlobalEnv)
output$message <- renderText("Workspace cleared, except 'global_dat'!")
# Trigger a click event on the 'Refresh App' button
shinyjs::runjs('$("#refreshButton").click();')
}
})
observeEvent(input$refreshButton, {
# Restart the Shiny app session
session$reload()
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("clearButton", "Clear Workspace"),
conditionalPanel('false', actionButton("refreshButton", "Refresh App")),
textOutput("message")
)
server <- function(input, output, session) {
# Initialize the click counter in JavaScript
shinyjs::runjs('var clickCount = 0;')
observe({
# Get the names of all objects in the global environment
global_objects <- ls(envir = .GlobalEnv)
# Display the names of the global objects
output$message <- renderText(paste("Global Environment Objects:", paste(global_objects, collapse = ', ')))
})
observeEvent(input$clearButton, {
# Increment the click counter in JavaScript
shinyjs::runjs('clickCount++;')
# Check if it's the second click or greater
if (shinyjs::runjs('clickCount >= 2')) {
# Get the names of all objects in the global environment
all_objects <- ls(envir = .GlobalEnv)
# Exclude the variable 'global_dat'
objects_to_remove <- setdiff(all_objects, c('global_dat'))
# Remove all objects, except 'global_dat', from the global environment
rm(list = objects_to_remove, envir = .GlobalEnv)
output$message <- renderText("Workspace cleared, except 'global_dat'!")
# Reset the click counter in JavaScript
shinyjs::runjs('clickCount = 0;')
# Trigger a click event on the 'Refresh App' button
shinyjs::runjs('$("#refreshButton").click();')
}
})
observeEvent(input$refreshButton, {
# Restart the Shiny app session
session$reload()
})
}
shinyApp(ui, server)
renv::restore(packages = "renv")
renv::status()
getwd
getwd()
shiny::runApp('DML_Rshiny_App')
# Load necessary packages
if (!requireNamespace("shiny", quietly = TRUE)) {
install.packages("shiny")
}
if (!requireNamespace("shinyjs", quietly = TRUE)) {
install.packages("shinyjs")
}
library(shiny)
library(shinyjs)
# Define Shiny app UI
ui <- fluidPage(
useShinyjs(),  # Initialize shinyjs
titlePanel("Minimize PowerPoint App"),
# Button to toggle visibility
actionButton("toggleButton", "Minimize PowerPoint"),
# PowerPoint iframe
box(solidHeader = T, title = 'Overview',collapsible = T,width = 12, tags$iframe(
id = "pptIframe",
src = "~/DML_Rshiny_App/www/dml_ppt_rshiny.pptx",
frameborder = 0, width = 800, height = 600,
allowfullscreen = TRUE, mozallowfullscreen = TRUE, webkitallowfullscreen = TRUE
))
)
# Load necessary packages
if (!requireNamespace("shiny", quietly = TRUE)) {
install.packages("shiny")
}
if (!requireNamespace("shinyjs", quietly = TRUE)) {
install.packages("shinyjs")
}
library(shiny)
library(shinyjs)
# Define Shiny app UI
ui <- fluidPage(
useShinyjs(),  # Initialize shinyjs
titlePanel("Minimize PowerPoint App"),
# Button to toggle visibility
actionButton("toggleButton", "Minimize PowerPoint"),
# PowerPoint iframe
box(solidHeader = T, title = 'Overview',collapsible = T,width = 12, tags$iframe(
id = "pptIframe",
src = "~/DML_Rshiny_App/www/dml_ppt_rshiny.pptx",
frameborder = 0, width = 800, height = 600,
allowfullscreen = TRUE, mozallowfullscreen = TRUE, webkitallowfullscreen = TRUE
))
)
install.packages('rsconnect')
runApp('DML_Rshiny_App')
runApp('DML_Rshiny_App')
py_install('scikit-learn')
runApp('DML_Rshiny_App')
library(data.table)
install.packages("quarto")
library(renv)
renv::clean()
shiny::runApp('DML_Rshiny_App')
py_install(c("numpy","pandas","doubleml","xgboost","scikit-learn","optuna"))
py_install('xgboost')
runApp('DML_Rshiny_App')
py_install('optuna')
py_install('doubleml')
shiny::runApp('DML_Rshiny_App')
install.packages('quarto')
install.packages('BH')
install.packages('rsconnect')
install.packages('Quarto')
install.packages("Quarto")
renv::update()
runApp('DML_Rshiny_App')
install.packages('packrat')
install.packages('rsconnect')
shiny::runApp()
runApp()
install.packages('renv')
runApp()
runApp()
shiny::runApp()
